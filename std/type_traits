namespace std {
	 
	template< class T > struct remove_const          { typedef T type; };
	template< class T > struct remove_const<const T> { typedef T type; };
	 
	template< class T > struct remove_volatile             { typedef T type; };
	template< class T > struct remove_volatile<volatile T> { typedef T type; };
	
	template< class T >
	struct remove_cv {
	    typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
	};
	
	template< class T >
	using remove_cv_t       = typename remove_cv<T>::type;
	
	template< class T >
	using remove_const_t    = typename remove_const<T>::type;
	
	template< class T >
	using remove_volatile_t = typename remove_volatile<T>::type;

	template< class T > struct remove_reference      {typedef T type;};
	template< class T > struct remove_reference<T&>  {typedef T type;};
	template< class T > struct remove_reference<T&&> {typedef T type;};

	template< class T >
	using remove_reference_t = typename remove_reference<T>::type;

}