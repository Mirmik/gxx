#ifndef GXX_STD_MEMORY_H
#define GXX_STD_MEMORY_H

#include <new>
#include <move.h>

namespace std {
	template <typename T>
	class allocator {
	public:
		template <typename ... Args>
		void construct(T* ptr, Args&& ... args) {
			new (ptr) T(std::forward<Args>(args) ...);
		}

		void destroy(T* ptr) {
			ptr->~T();
		}

		T* allocate(size_t n) {
			return (T*) ::operator new(n * sizeof(T));
		}

		void deallocate(T* ptr) {
			::operator delete(ptr);
		}
	};

	template< class T >
	T* addressof(T& arg) {
		return reinterpret_cast<T*>( &const_cast<char&>( reinterpret_cast<const volatile char&>(arg) ) );
	}

	template <typename T>
	class shared_ptr {
		T* ptr;

	public:
		T* operator-> (){ return ptr; }
	};
}

#endif