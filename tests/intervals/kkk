In file included from /usr/include/x86_64-linux-gnu/c++/5/bits/c++allocator.h:33:0,
                 from /usr/include/c++/5/bits/allocator.h:46,
                 from /usr/include/c++/5/vector:61,
                 from ./../../gxx/math/interval.h:4,
                 from ./main.cpp:1:
/usr/include/c++/5/ext/new_allocator.h: In instantiation of ‘struct __gnu_cxx::new_allocator<const gxx::math::interval<double> >’:
/usr/include/c++/5/bits/allocator.h:92:11:   required from ‘class std::allocator<const gxx::math::interval<double> >’
/usr/include/c++/5/bits/stl_vector.h:79:14:   required from ‘struct std::_Vector_base<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > >::_Vector_impl’
/usr/include/c++/5/bits/stl_vector.h:164:20:   required from ‘struct std::_Vector_base<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > >’
/usr/include/c++/5/bits/stl_vector.h:214:11:   required from ‘class std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > >’
./../../gxx/math/interval.h:106:76:   required from ‘struct gxx::math::interval_union<double>::intersected_group’
./../../gxx/math/interval.h:197:76:   required from ‘gxx::math::interval_union<T> gxx::math::interval_union<T>::combine(const gxx::math::interval_union<T>&) const [with T = double]’
./main.cpp:47:2:   required from here
/usr/include/c++/5/ext/new_allocator.h:93:7: error: ‘const _Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::const_reference) const [with _Tp = const gxx::math::interval<double>; __gnu_cxx::new_allocator<_Tp>::const_pointer = const gxx::math::interval<double>*; __gnu_cxx::new_allocator<_Tp>::const_reference = const gxx::math::interval<double>&]’ cannot be overloaded
       address(const_reference __x) const _GLIBCXX_NOEXCEPT
       ^
/usr/include/c++/5/ext/new_allocator.h:89:7: error: with ‘_Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::reference) const [with _Tp = const gxx::math::interval<double>; __gnu_cxx::new_allocator<_Tp>::pointer = const gxx::math::interval<double>*; __gnu_cxx::new_allocator<_Tp>::reference = const gxx::math::interval<double>&]’
       address(reference __x) const _GLIBCXX_NOEXCEPT
       ^
In file included from ./main.cpp:1:0:
./../../gxx/math/interval.h: In instantiation of ‘static gxx::math::interval_union<T>::intersected_group gxx::math::interval_union<T>::find_intersected_group(auto:1, auto:2, auto:3, auto:4) [with auto:1 = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >; auto:2 = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >; auto:3 = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >; auto:4 = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >; T = double]’:
./../../gxx/math/interval.h:197:76:   required from ‘gxx::math::interval_union<T> gxx::math::interval_union<T>::combine(const gxx::math::interval_union<T>&) const [with T = double]’
./main.cpp:47:2:   required from here
./../../gxx/math/interval.h:155:52: error: no matching function for call to ‘gxx::math::interval_union<double>::intersected_group::intersected_group(__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&)’
      return intersected_group(ait, ait, bit, ++ebit);
                                                    ^
./../../gxx/math/interval.h:114:5: note: candidate: gxx::math::interval_union<T>::intersected_group::intersected_group(gxx::math::interval_union<T>::intersected_group::begtype, endtype, gxx::math::interval_union<T>::intersected_group::begtype, endtype) [with T = double; gxx::math::interval_union<T>::intersected_group::begtype = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >; gxx::math::interval_union<T>::intersected_group::endtype = const __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >]
     intersected_group(begtype a, endtype ea, begtype b, endtype eb) : begin_ait(a), end_ait(ea), begin_bit(b), end_bit(eb) {}
     ^
./../../gxx/math/interval.h:114:5: note:   no known conversion for argument 1 from ‘__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >’ to ‘gxx::math::interval_union<double>::intersected_group::begtype {aka __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >}’
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(const gxx::math::interval_union<double>::intersected_group&)
    struct intersected_group {
           ^
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(gxx::math::interval_union<double>::intersected_group&&)
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:160:52: error: no matching function for call to ‘gxx::math::interval_union<double>::intersected_group::intersected_group(__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&)’
      return intersected_group(ait, ++eait, bit, bit);
                                                    ^
./../../gxx/math/interval.h:114:5: note: candidate: gxx::math::interval_union<T>::intersected_group::intersected_group(gxx::math::interval_union<T>::intersected_group::begtype, endtype, gxx::math::interval_union<T>::intersected_group::begtype, endtype) [with T = double; gxx::math::interval_union<T>::intersected_group::begtype = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >; gxx::math::interval_union<T>::intersected_group::endtype = const __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >]
     intersected_group(begtype a, endtype ea, begtype b, endtype eb) : begin_ait(a), end_ait(ea), begin_bit(b), end_bit(eb) {}
     ^
./../../gxx/math/interval.h:114:5: note:   no known conversion for argument 1 from ‘__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >’ to ‘gxx::math::interval_union<double>::intersected_group::begtype {aka __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >}’
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(const gxx::math::interval_union<double>::intersected_group&)
    struct intersected_group {
           ^
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(gxx::math::interval_union<double>::intersected_group&&)
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:166:53: error: no matching function for call to ‘gxx::math::interval_union<double>::intersected_group::intersected_group(__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&)’
       return intersected_group(ait, ++eait, bit, bit);
                                                     ^
./../../gxx/math/interval.h:114:5: note: candidate: gxx::math::interval_union<T>::intersected_group::intersected_group(gxx::math::interval_union<T>::intersected_group::begtype, endtype, gxx::math::interval_union<T>::intersected_group::begtype, endtype) [with T = double; gxx::math::interval_union<T>::intersected_group::begtype = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >; gxx::math::interval_union<T>::intersected_group::endtype = const __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >]
     intersected_group(begtype a, endtype ea, begtype b, endtype eb) : begin_ait(a), end_ait(ea), begin_bit(b), end_bit(eb) {}
     ^
./../../gxx/math/interval.h:114:5: note:   no known conversion for argument 1 from ‘__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >’ to ‘gxx::math::interval_union<double>::intersected_group::begtype {aka __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >}’
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(const gxx::math::interval_union<double>::intersected_group&)
    struct intersected_group {
           ^
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(gxx::math::interval_union<double>::intersected_group&&)
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:170:53: error: no matching function for call to ‘gxx::math::interval_union<double>::intersected_group::intersected_group(__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&)’
       return intersected_group(ait, ait, bit, ++ebit);
                                                     ^
./../../gxx/math/interval.h:114:5: note: candidate: gxx::math::interval_union<T>::intersected_group::intersected_group(gxx::math::interval_union<T>::intersected_group::begtype, endtype, gxx::math::interval_union<T>::intersected_group::begtype, endtype) [with T = double; gxx::math::interval_union<T>::intersected_group::begtype = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >; gxx::math::interval_union<T>::intersected_group::endtype = const __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >]
     intersected_group(begtype a, endtype ea, begtype b, endtype eb) : begin_ait(a), end_ait(ea), begin_bit(b), end_bit(eb) {}
     ^
./../../gxx/math/interval.h:114:5: note:   no known conversion for argument 1 from ‘__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >’ to ‘gxx::math::interval_union<double>::intersected_group::begtype {aka __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >}’
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(const gxx::math::interval_union<double>::intersected_group&)
    struct intersected_group {
           ^
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(gxx::math::interval_union<double>::intersected_group&&)
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:185:53: error: no matching function for call to ‘gxx::math::interval_union<double>::intersected_group::intersected_group(__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&, __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >&)’
      return intersected_group(ait, anext, bit, bnext);
                                                     ^
./../../gxx/math/interval.h:114:5: note: candidate: gxx::math::interval_union<T>::intersected_group::intersected_group(gxx::math::interval_union<T>::intersected_group::begtype, endtype, gxx::math::interval_union<T>::intersected_group::begtype, endtype) [with T = double; gxx::math::interval_union<T>::intersected_group::begtype = __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >; gxx::math::interval_union<T>::intersected_group::endtype = const __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >]
     intersected_group(begtype a, endtype ea, begtype b, endtype eb) : begin_ait(a), end_ait(ea), begin_bit(b), end_bit(eb) {}
     ^
./../../gxx/math/interval.h:114:5: note:   no known conversion for argument 1 from ‘__gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<gxx::math::interval<double>, std::allocator<gxx::math::interval<double> > > >’ to ‘gxx::math::interval_union<double>::intersected_group::begtype {aka __gnu_cxx::__normal_iterator<const gxx::math::interval<double>*, std::vector<const gxx::math::interval<double>, std::allocator<const gxx::math::interval<double> > > >}’
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(const gxx::math::interval_union<double>::intersected_group&)
    struct intersected_group {
           ^
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
./../../gxx/math/interval.h:105:11: note: candidate: constexpr gxx::math::interval_union<double>::intersected_group::intersected_group(gxx::math::interval_union<double>::intersected_group&&)
./../../gxx/math/interval.h:105:11: note:   candidate expects 1 argument, 4 provided
